import tkinter as tk
from tkinter import filedialog, ttk, messagebox
import pandas as pd
import os
import io
from pandasgui import show

# ------------ Operation Classes ------------

class FileProcessor:
    def __init__(self, df_output, df_input):
        self.df_output = df_output
        self.df_input = df_input

    def preprocess(self):
        # Drop 'slno' if it exists
        self.df_output.drop(columns=[col for col in ['slno', 'Slno', 'SLNO'] if col in self.df_output.columns], inplace=True)

        # Duplicate with swapped currency columns
        if 'Send Currency' in self.df_input.columns and 'Receive Currency' in self.df_input.columns:
            swapped = self.df_input.rename(columns={
                'Send Currency': 'Receive Currency',
                'Receive Currency': 'Send Currency'
            })
            self.df_input = pd.concat([self.df_input, swapped], ignore_index=True)

        # Ensure type conversion
        if 'Customer Segment Type' in self.df_input.columns:
            self.df_input['Customer Segment Type'] = self.df_input['Customer Segment Type'].astype(str)

        return self.df_output, self.df_input


class CreateOperation:
    def __init__(self, df_output, df_input):
        self.df_output = df_output
        self.df_input = df_input

    def execute(self):
        merge_columns = ['Entity', 'Product', 'Channel', 'Send Currency', 'Receive Currency']
        merged = pd.merge(self.df_output, self.df_input, on=merge_columns, how='inner')
        final = pd.concat([self.df_output, merged], ignore_index=True)
        return final


class UpdateOperation:
    def __init__(self, df_output, df_input):
        self.df_output = df_output
        self.df_input = df_input

    def execute(self):
        merge_columns = ['Entity', 'Product', 'Channel', 'Send Currency', 'Receive Currency']
        processdf = pd.merge(self.df_output, self.df_input, on=merge_columns, how='inner')

        comparison_columns = [
            'Entity', 'Product', 'Channel', 'Send Currency', 'Receive Currency',
            'Customer Segment Type', 'Tier Tier Min 2 Amount', 'Narrative',
            'Core Margin Type', 'Maintenance Group', 'In Default Margin'
        ]

        unique = self.df_output.merge(
            processdf, on=comparison_columns, how='left', indicator=True
        )
        unique = unique.query('_merge == "left_only"').drop(columns=['_merge'])

        final = pd.concat([unique, processdf], ignore_index=True)
        return final


# ------------ Tkinter UI ------------

class ExcelApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Excel Processor - Create/Update")

        self.df_output = None
        self.df_input = None
        self.final_df = None

        self.create_widgets()

    def create_widgets(self):
        tk.Label(self.root, text="Upload Output Excel File:").pack()
        tk.Button(self.root, text="Browse", command=self.load_output_file).pack()

        tk.Label(self.root, text="Upload Input Excel File:").pack()
        tk.Button(self.root, text="Browse", command=self.load_input_file).pack()

        tk.Label(self.root, text="Select Operation Type:").pack()
        self.operation_var = tk.StringVar(value="Create")
        ttk.Combobox(self.root, textvariable=self.operation_var, values=["Create", "Update"]).pack()

        tk.Button(self.root, text="Run Operation", command=self.run_operation).pack(pady=10)
        tk.Button(self.root, text="Download Final Excel", command=self.download_file).pack(pady=10)

    def load_output_file(self):
        file_path = filedialog.askopenfilename(filetypes=[("Excel files", "*.xlsx")])
        if file_path:
            try:
                self.df_output = pd.read_excel(file_path, sheet_name="sheet1")
                messagebox.showinfo("Success", "Output file loaded successfully.")
            except Exception as e:
                messagebox.showerror("Error", f"Failed to read output file.\n{e}")

    def load_input_file(self):
        file_path = filedialog.askopenfilename(filetypes=[("Excel files", "*.xlsx")])
        if file_path:
            try:
                self.df_input = pd.read_excel(file_path, sheet_name="sheet1")
                messagebox.showinfo("Success", "Input file loaded successfully.")
            except Exception as e:
                messagebox.showerror("Error", f"Failed to read input file.\n{e}")

    def run_operation(self):
        if self.df_output is None or self.df_input is None:
            messagebox.showwarning("Warning", "Please upload both files first.")
            return

        try:
            processor = FileProcessor(self.df_output.copy(), self.df_input.copy())
            df_output, df_input = processor.preprocess()

            if self.operation_var.get() == "Create":
                op = CreateOperation(df_output, df_input)
            else:
                op = UpdateOperation(df_output, df_input)

            self.final_df = op.execute()
            show(self.final_df)  # Open in pandasgui for preview
        except Exception as e:
            messagebox.showerror("Error", f"Failed to process files.\n{e}")

    def download_file(self):
        if self.final_df is None:
            messagebox.showwarning("Warning", "No final data to save.")
            return

        file_path = filedialog.asksaveasfilename(defaultextension=".xlsx",
                                                 filetypes=[("Excel files", "*.xlsx")],
                                                 initialfile="FinalOutput.xlsx")
        if file_path:
            try:
                with pd.ExcelWriter(file_path, engine='xlsxwriter') as writer:
                    self.final_df.to_excel(writer, index=False, sheet_name='FinalSheet')
                messagebox.showinfo("Success", f"File saved to {file_path}")
            except Exception as e:
                messagebox.showerror("Error", f"Failed to save file.\n{e}")


# ------------ Main Execution ------------

if __name__ == "__main__":
    root = tk.Tk()
    app = ExcelApp(root)
    root.mainloop()
