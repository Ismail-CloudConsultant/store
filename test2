# forex_dashboard_insights.py
import pandas as pd
import numpy as np
import plotly.express as px
import os
from pathlib import Path

# ---------------- Load Data ----------------
def load_data(csv_path):
    df = pd.read_csv(csv_path, parse_dates=['Date'], dayfirst=False)
    df.columns = [c.strip() for c in df.columns]  # normalize col names
    
    # Clean Margin Rate: convert % strings to float fractions
    if 'Margin Rate' in df.columns:
        df['Margin Rate'] = df['Margin Rate'].replace('%', '', regex=True).astype(float) / 100.0
    
    return df

# ---------------- Insights ----------------
def generate_insights(df, outdir="outputs_dashboard"):
    Path(outdir).mkdir(exist_ok=True, parents=True)
    
    amount_col = 'Transaction Amount (USD)'
    txn_col = 'No. of Transactions'
    
    insights = {}

    # 1️⃣ OVERALL KPIs
    insights['total_value'] = df[amount_col].sum()
    insights['total_count'] = df[txn_col].sum()
    insights['avg_txn_size'] = insights['total_value'] / insights['total_count']
    
    # Save KPI summary
    kpi_df = pd.DataFrame({
        'Metric': ['Total Transaction Value', 'Total Transactions', 'Average Transaction Size'],
        'Value': [insights['total_value'], insights['total_count'], insights['avg_txn_size']]
    })
    kpi_df.to_csv(f"{outdir}/kpi_summary.csv", index=False)

    # 2️⃣ TOP currency pairs by value & count
    cp_summary = df.groupby('Currency Pair').agg(
        total_value=(amount_col, 'sum'),
        total_count=(txn_col, 'sum')
    ).reset_index().sort_values(by='total_value', ascending=False)
    cp_summary.to_csv(f"{outdir}/currency_pair_summary.csv", index=False)

    fig = px.bar(cp_summary.head(10), x='Currency Pair', y='total_value',
                 title="Top Currency Pairs by Value")
    fig.write_html(f"{outdir}/top_currency_pairs.html")

    # 3️⃣ Channel Analysis
    channel_summary = df.groupby('Channel').agg(
        total_value=(amount_col, 'sum'),
        total_count=(txn_col, 'sum'),
        avg_ticket=(amount_col, 'mean')
    ).reset_index()
    channel_summary.to_csv(f"{outdir}/channel_summary.csv", index=False)

    fig = px.bar(channel_summary, x='Channel', y='total_value',
                 title="Transaction Value by Channel")
    fig.write_html(f"{outdir}/channel_analysis.html")

    # 4️⃣ Segment Performance
    segment_summary = df.groupby('Segment').agg(
        total_value=(amount_col, 'sum'),
        total_count=(txn_col, 'sum'),
        avg_ticket=(amount_col, 'mean')
    ).reset_index()
    segment_summary.to_csv(f"{outdir}/segment_summary.csv", index=False)

    fig = px.pie(segment_summary, names='Segment', values='total_value',
                 title='Transaction Value by Segment')
    fig.write_html(f"{outdir}/segment_analysis.html")

    # 5️⃣ Profitability by Currency Pair
    if 'Margin Rate' in df.columns:
        df['Revenue'] = df[amount_col] * df['Margin Rate']
        margin_cp = df.groupby('Currency Pair').agg(
            avg_margin=('Margin Rate', 'mean'),
            total_revenue=('Revenue', 'sum')
        ).reset_index().sort_values(by='total_revenue', ascending=False)
        margin_cp.to_csv(f"{outdir}/margin_by_currency_pair.csv", index=False)

        fig = px.bar(margin_cp, x='Currency Pair', y='total_revenue',
                     title="Revenue by Currency Pair")
        fig.write_html(f"{outdir}/revenue_by_currency_pair.html")

    # 6️⃣ Monthly Trends
    df['Month'] = df['Date'].dt.to_period('M').dt.to_timestamp()
    monthly = df.groupby('Month').agg(
        total_value=(amount_col, 'sum'),
        total_count=(txn_col, 'sum')
    ).reset_index()
    monthly.to_csv(f"{outdir}/monthly_summary.csv", index=False)

    fig = px.line(monthly, x='Month', y='total_value', markers=True,
                  title="Monthly Transaction Value Trend")
    fig.write_html(f"{outdir}/monthly_trend.html")

    # 7️⃣ Heatmaps
    if 'Channel' in df.columns:
        pivot_channel = df.pivot_table(index='Currency Pair', columns='Channel',
                                       values=amount_col, aggfunc='sum', fill_value=0)
        fig = px.imshow(pivot_channel,
                        title='Currency Pair × Channel (Transaction Value)',
                        labels=dict(x="Channel", y="Currency Pair", color="Value"))
        fig.write_html(f"{outdir}/heatmap_currency_channel.html")

    if 'Segment' in df.columns:
        pivot_segment = df.pivot_table(index='Currency Pair', columns='Segment',
                                       values=amount_col, aggfunc='sum', fill_value=0)
        fig = px.imshow(pivot_segment,
                        title='Currency Pair × Segment (Transaction Value)',
                        labels=dict(x="Segment", y="Currency Pair", color="Value"))
        fig.write_html(f"{outdir}/heatmap_currency_segment.html")
    
    print(f"Insights and charts saved in: {outdir}")

# ---------------- Run Example ----------------
if __name__ == "__main__":
    # Replace with your CSV file path
    csv_path = "forex_transactions_sample.csv"
    df = load_data(csv_path)
    generate_insights(df)
