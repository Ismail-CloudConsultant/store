# forex_dashboard_streamlit.py
import streamlit as st
import pandas as pd
import plotly.express as px

st.set_page_config(page_title="Forex Insights Dashboard", layout="wide")

# ---------------- Load Data ----------------
@st.cache_data
def load_data(file):
    df = pd.read_csv(file, parse_dates=['Date'])
    df.columns = [c.strip() for c in df.columns]  # normalize col names
    if 'Margin Rate' in df.columns:
        df['Margin Rate'] = df['Margin Rate'].astype(str).str.replace('%', '').astype(float) / 100
    return df

# ---------------- KPI Calculations ----------------
def compute_kpis(df):
    kpis = {
        "Total Transaction Count": df['No. of Transactions'].sum(),
        "Total Transaction Value (USD)": df['Transaction Amount (USD)'].sum(),
        "Average Transaction Value (USD)": df['Transaction Amount (USD)'].sum() / df['No. of Transactions'].sum(),
        "Min Transaction Value (USD)": df['Min Transaction Value (USD)'].min(),
        "Max Transaction Value (USD)": df['Max Transaction Value (USD)'].max(),
        "Unique Currency Pairs": df['Currency Pair'].nunique(),
        "Average Margin Rate (%)": df['Margin Rate'].mean() * 100,
        "Total Spread Earned (USD)": df['Total Spread Earned (USD)'].sum(),
        "Avg. Spread per Transaction (USD)": df['Total Spread Earned (USD)'].sum() / df['No. of Transactions'].sum(),
        "Average Conversion Rate (%)": df['Conversion Rate (%)'].mean(),
        "Average Repeat Customer (%)": df['Repeat Customer %'].mean(),
        "Average CAC (USD)": df['Customer Acquisition Cost (USD)'].mean()
    }
    return kpis

# ---------------- Streamlit App ----------------
st.title("ðŸ’¹ Forex Trading Insights Dashboard")

uploaded_file = st.file_uploader("Upload CSV", type=["csv"])
if uploaded_file:
    df = load_data(uploaded_file)

    # ---------------- Filters ----------------
    col1, col2 = st.columns(2)
    selected_markets = col1.multiselect("Select Market", df["Market"].unique(), default=df["Market"].unique())
    selected_segments = col2.multiselect("Select Segment", df["Segment"].unique(), default=df["Segment"].unique())

    # Apply filters
    df = df[df["Market"].isin(selected_markets) & df["Segment"].isin(selected_segments)]

    # KPIs
    kpis = compute_kpis(df)
    st.subheader("ðŸ“Š Key Performance Indicators")
    kpi_cols = st.columns(4)
    for i, (metric, value) in enumerate(kpis.items()):
        with kpi_cols[i % 4]:
            st.metric(metric, f"{value:,.2f}")

    st.markdown("---")

    # ----------- Row 1 -----------
    col_a, col_b, col_c = st.columns(3)

    with col_a:
        st.subheader("Total Transaction Count by Currency Pair")
        fig1 = px.bar(df.groupby("Currency Pair", as_index=False)['No. of Transactions'].sum(),
                      x="Currency Pair", y="No. of Transactions", text_auto=True)
        st.plotly_chart(fig1, use_container_width=True)

    with col_b:
        st.subheader("Total Transaction Value (USD) by Currency Pair")
        fig2 = px.bar(df.groupby("Currency Pair", as_index=False)['Transaction Amount (USD)'].sum(),
                      x="Currency Pair", y="Transaction Amount (USD)", text_auto=True)
        st.plotly_chart(fig2, use_container_width=True)

    with col_c:
        st.subheader("Total Spread Earned (USD) in Currency Pair")
        fig3 = px.line(df.groupby("Currency Pair", as_index=False)['Total Spread Earned (USD)'].sum(),
                       x="Currency Pair", y="Total Spread Earned (USD)", markers=True)
        st.plotly_chart(fig3, use_container_width=True)

    # ----------- Row 2 -----------
    col_d, col_e, col_f = st.columns(3)

    with col_d:
        st.subheader("Avg. Spread per Transaction (USD) by Segment")
        fig4 = px.bar(df.groupby("Segment", as_index=False)['Avg. Spread per Transaction (USD)'].mean(),
                      x="Segment", y="Avg. Spread per Transaction (USD)", text_auto=True)
        st.plotly_chart(fig4, use_container_width=True)

    with col_e:
        st.subheader("Transaction Value by Segment")
        fig5 = px.pie(df, names="Segment", values="Transaction Amount (USD)")
        st.plotly_chart(fig5, use_container_width=True)

    with col_f:
        st.subheader("Top Currency Pairs by Transaction Value")
        top_cp = df.groupby("Currency Pair", as_index=False)['Transaction Amount (USD)'].sum().sort_values(
            by="Transaction Amount (USD)", ascending=False)
        fig6 = px.bar(top_cp, x="Currency Pair", y="Transaction Amount (USD)", text_auto=True)
        st.plotly_chart(fig6, use_container_width=True)

else:
    st.info("Please upload a CSV file to see the dashboard.")